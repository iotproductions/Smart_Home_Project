//-------------------------------------------------------------------------------------------------------------------------
// Main softwares
//-------------------------------------------------------------------------------------------------------------------------
1> Wiring Pi
http://wiringpi.com/download-and-install/
$ cd
$ git clone git://git.drogon.net/wiringPi
$ cd ~/wiringPi
$ git pull origin
$ ./build
Testing:
$ gpio -v
$ gpio readall

2> NodeJS
http://thisdavej.com/beginners-guide-to-installing-node-js-on-a-raspberry-pi/
$ curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
$ sudo apt install nodejs
Testing
$ node -v

3> MongoDB
https://diyprojects.io/mongodb-part-1-installation-windows-macos-raspberry-pi/#.WR7L1uvyiUl
https://diyprojects.io/mongodb-part-1-installation-windows-macos-raspberry-pi/#.WR27QZJ97IV
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install mongodb-server
Binary file stored at:
/usr/bin
Data files stored at:
/var/lib/mongodb
check status:
$ sudo service --status-all
or:
$ sudo service mongodb status
start mongodb service:
$ sudo service start mongodb
stop mongodb service:
$ sudo service mongodb stop
Start DB
$ sudo mongod --dbpath /var/lib/mongodb

4> Wifi GUI
$ sudo apt-get install wpa_gui 
$ sudo reboot

5> SETTING UP AN APACHE WEB SERVER ON A RASPBERRY PI
https://www.raspberrypi.org/documentation/remote-access/web-server/apache.md
$ sudo apt-get install apache2 -y

6> SCHEDULING TASKS WITH CRON
https://www.raspberrypi.org/documentation/linux/usage/cron.md
$ sudo apt-get install gnome-schedule
USAGE:
@reboot sudo node /home/pi/myscript.js

//-------------------------------------------------------------------------------------------------------------------------
// List of NPM installed
//-------------------------------------------------------------------------------------------------------------------------
1> Wiring-Pi node
https://github.com/WiringPi/WiringPi-Node/blob/master/DOCUMENTATION.md
Install
$ npm install wiring-pi
2> pi-gpio
https://www.npmjs.com/package/pi-gpio
$ npm install pi-gpio
3> MQTT
https://www.npmjs.com/package/mqtt
$ npm install mqtt
4> http-request
https://www.npmjs.com/package/http-request
$ npm install http-request
5> PM2
https://www.npmjs.com/package/pm2
$ npm install -g pm2
6> body-parser
https://www.npmjs.com/package/body-parser
$ npm install body-parser
7> request
https://www.npmjs.com/package/request
$ npm install request
8> Mongoose
https://www.npmjs.com/package/mongoose
$ npm install mongoose
//-------------------------------------------------------------------------------------------------------------------------
// Solved Issues
//-------------------------------------------------------------------------------------------------------------------------
1> Enable SSH on Rasbian from Windows
https://www.youtube.com/watch?v=ud8QH6pkc0o

2> Solving "Access-Control-Allow-Origin" in localhost NodeJS + Express
https://www.youtube.com/watch?v=cUWcZ4FzgmI

3> Fix Wiring Pi: Unable to determine hardware version. I see: Hardware   : BCM2835
https://www.domoticz.com/forum/viewtopic.php?t=16852
$ sudo rpi-update 52241088c1da59a359110d39c1875cda56496764

4> Note that if you're currently using connect.bodyParser(), you will still get the deprecation warning for multipart. For now, you can ignore it since you should only see the warning message once at start up. If you want to avoid any warning messages, do this instead (which is what connect.bodyParser() will be in 3.0):

On Express replace: 
connect.bodyParser()
by use:
app.use(connect.urlencoded())
app.use(connect.json())
